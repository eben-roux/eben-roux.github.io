---
layout: post
title: "Why *I* think software fails"
date: 2010-02-11 22:56:00
comments: true
categories: 
---

<p>Since the software industry has now been around for quite some time it is possible to look at the statistics around software failure.&nbsp; Although a great deal has been written and said about software development failure there is probably not too much in the line of anything that can be done about it.&nbsp; There should be.</p>
<p>Looking at the history of software development it is quite easy to blame the process or method used to manage the development.&nbsp; Software development is a broad discipline encompassing quite a number of spheres so singling out any particular cause is quite difficult.&nbsp; That is why there are so many lists specifying the reasons for software failure, e.g.:</p>
<ul>
<li><a href="http://www.projectsmart.co.uk/why-software-projects-fail.html">Why Software Projects Fail and How to Make Them Succeed</a></li>
<li><a href="http://www.hks.harvard.edu/m-rcbg/ethiopia/Publications/Top%2010%20Reasons%20Why%20Systems%20Projects%20Fail.pdf">Top 10 Reasons Why Systems Projects Fail</a></li>
<li><a href="http://it.toolbox.com/blogs/madgreek/10-reasons-why-enterprise-initiatives-fail-24082">10 Reasons why Enterprise Initiatives fail</a></li>
<li><a href="http://www.computerworld.com/s/article/71209/Why_Projects_Fail">Five reasons why software projects fail</a></li>
</ul>
<p>There are even good suggestions in there as to what can be done.</p>
<h3>Software fails because it sucks</h3>
<p>Now that was simple.&nbsp; But why does it suck?&nbsp; <em>What</em> makes it suck?&nbsp; I was watching a podcast by <a href="http://www.suckbusters.com/">David Platt</a> about his book on the subject and he said a very interesting thing:</p>
<p style="padding-left: 30px;">"...that's using the computer to do what the computer is good at so the human can do what the human is good at."</p>
<p>This immediately stood out because it has been my experience that as soon as one tries to implement functionality in any system that is <em>flexible</em> it becomes extremely <em>complex</em>.&nbsp; Anything flexible is not only easy for humans to grasp and do, but also very obvious.&nbsp; Unfortunately, the geniuses in the chip-making industry have yet to come up with the '<em>obvious chip</em>'.&nbsp; That is why one would, as a software developer, explain a particularly complex problem to someone (like a business analyst or a domain expert) and get a response of "So what's the problem?".&nbsp; They typically don't realize that the human brain is OK with fuzzy logic but that fuzzy logic cannot be represented very well by a simple algorithm.</p>
<h3>Defining complexity</h3>
<p>When I think about software complexity <a href="http://www.objectwatch.com/">Roger Sessions</a> always comes to mind.&nbsp; From what I loosely recall he has mentioned that complexity in a system increases as the number of states increase and complexity between systems increases drastically as the number of connections between them increases.&nbsp; And then, of course, within a system there is also the coupling aspect in terms of class interaction.</p>
<p>So the following are the main culprits in the complexity game:</p>
<ul>
<li>Heuristic level required</li>
<li>Number of states</li>
<li>Coupling (intra- and inter-system)</li>
</ul>
<h3>How could we prevent the failures</h3>
<p>I read <a href="http://www.tompeters.com/reimagine/">Re-imagine!</a> by <a href="http://www.tompeters.com/">Tom Peters</a> a few years back and if memory serves that is where I read:</p>
<p style="padding-left: 30px;">"Fail faster, succeed sooner."</p>
<p>Sounds very agile to me.&nbsp; So the quicker we can prove that a specific technology, product, or development project is <em>not</em> going to work, the better.&nbsp; Another approach would be to burn $10,000,000 of your client's money and keep on keeping on until your <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=51769">momentum runs out</a>.&nbsp; At *that* point there will be anger, finger-pointing, tears, blows, and in all probably a good measure of litigation.</p>
<p>Granted, there are definitely systems that require heuristics and it  is a rather specialised area that may require expertise in areas that  the normal run-of-the-mill software developer simply does not have.&nbsp; It  is hard enough keeping abreast of changes in technology.&nbsp; Software  developers are not accountants, pharmacists, inventory managers,  logistics experts, statisticians, or mathematicians.&nbsp; Yet we find  ourselves in situations where we are simply given a vague direction to  go in and '<em>since we are so sharp</em>' we'll just figure it out.&nbsp;  Maybe.&nbsp; Probably not.&nbsp; That is why a domain expert is so crucial to  software success.&nbsp; A business analyst would find themselves in the same  quandry as a programmer.&nbsp; They document things but may not have the  required extertise either (although some may).&nbsp; This is why management commitment is also listed quite often in the lists of reasons for software failure.&nbsp; Management needs to ensure that the domain experts are indeed available.</p>
<h4>Technology to the rescue! Not.</h4>
<p>Many companies are lead to believe that their problems are related to technology.&nbsp; Now sometimes the latest technology would help and sometimes old technology simply becomes obsolete.&nbsp; But more often than not it is a case of a vendor telling the client that they simply need to use a single platform along with all the merry products that are built there-on.&nbsp; But a quick visit to the common sense center of the brain will tell the client that it <em>may</em> just be that they merge with another company in future and then there <em>may</em> be different technologies at play or they <em>may </em>purchase a product that relies on different technology altogether.</p>
<p>A homogenous technology environment will definitely not solve anything and is somewhat of a pipe dream in any but the simplest environments.</p>
<h4>Products to the rescue!</h4>
<p>OK, so we'll throw in a rules engine, workflow engine, CRM, CMS or any other COTS product and <em>voil&aacute;</em>!&nbsp; We'll simply build on top of that.&nbsp; The thing is: each product satisfies a specific need.&nbsp; By the time most folks realise that there is no one ring to rule them all it has all gone south.</p>
<h4>Heuristic level / Flexibility<br /></h4>
<p>Too many systems try to do too many things.&nbsp; I once worked on a system that was, essentially, a loan management system.&nbsp; It has been in development for over three years with a constant team of around twenty folks and I don't think it will see the light of day.&nbsp; One thing the client does in their daily life is to authorise loans or extensions on loans based on a motivation.&nbsp; Now this motivation document has traditionally been typed up in a word processor.&nbsp; In one instance a loan of say $10,000 needs to be authorised to a small company.&nbsp; Now, not much motivation required in this case since it is a small risk.&nbsp; Half a page did the trick.&nbsp; In another case a $20,000,000 loan needs to be scrutinized.&nbsp; Here a decent document is required that contains the company structure along with directors and lists of securities, and so on and so forth.&nbsp; This was put into the system along with all the input required to make this authorisation document work.&nbsp; It is total unnecessary to do so.&nbsp; Absolutely no value is gained by doing so.&nbsp; Just link to the original document or scan it in.&nbsp; Extreme complexity and cost was added for very little value.</p>
<h4>Number of states</h4>
<p>This part is actually slightly related to coupling anyway.&nbsp; One of the examples used by Roger Sessions is that of a coin.&nbsp; A coin has two sides: heads or tails.&nbsp; So there are two states that one needs to test for in your system.&nbsp; But how about two coins: heads-heads or heads-tails or tails-heads or tails-tails.&nbsp; OK, that was only four.&nbsp; But how about 3 coins.&nbsp; Well, that would be eight combinations since it is 2 ^ 3.</p>
<p>Now to be honest that wasn't too bad.&nbsp; But let's take a dice.&nbsp; Six sides there, so six states.&nbsp; Two dice would be 6 ^ 2 = 36 and 3 dice would be 6 ^ 3 = 216.</p>
<p>The only way to reduce this complexity is to reduce the states.&nbsp; At least, we need to reduce the coupling of the states so that, in our dice example, we have 3 independent dice so the number of states is 6 + 6 + 6 = 18 ( a *lot* less that 216) if we could find a way to separate the states from each other.</p>
<h4>Coupling</h4>
<p>I have blogged about coupling before.&nbsp; As software developers we need to identify different bounded contexts (as per Eric Evan's Domain-Driven Design) and implement them independently of each other and I have a sneaky suspicion that this is more-or-less what Roger Session does with his <em>simple iterative partitions</em>.&nbsp; The problem here is: how?</p>
<p>Quite a few of the lists of reasons for software failure include skill level as a factor.&nbsp; However, even highly skilled developers may get this wrong.&nbsp; So the software will still fail.&nbsp; A highly coupled system or enterprise solution is very, very fragile.</p>
<h3>Service-Orientation and Tacit Knowledge</h3>
<p>The key to decoupling bounded contexts or ending up with simple partitions is service-orientation.&nbsp; But it has to be done right.&nbsp; A service bus is all good-and-well but that other technology we need to talk to in our hetergenous environment is problematic.&nbsp; A possible solution to that interaction is bridging between the various service bus implementations so that the systems remain unaware of the other systems.&nbsp; Of course, most companies probably will not find themselves in such a position but it is a way to handle different technologies.</p>
<p>How would one actually go about stringing all these bits together?&nbsp; The answer is obviously not that simple since all the knowledge and experience required cannot really be measured.&nbsp; I think the reason for this is that it falls into the realm of <a href="http://en.wikipedia.org/wiki/Tacit_knowledge">tacit knowledge</a>.</p>
<p>The best thing to do for companies is to keep trying new ideas on a small or experimental projects and then to see whether something useful can be produced.&nbsp; Take the ideas developers and others have and give it a bash.&nbsp; The Big-Bang kind of approach has proven itself to be a mistake time-and-time again so growing something in an organic way may be best.&nbsp; There is also nothing wrong with 'shedding some pounds' as we move along.</p>
<h3>A last word on Tasks vs. Functions<br /></h3>
<p>Over the years I have found that we as developers tend to develop software that is a real pain to use since we are not the ones using it.&nbsp; Giving a user a bunch of loose ends does not help.&nbsp; As an example I would like to use my <a href="http://www.room2010.co.za">Room2010</a> site that I actually developed for myself and then had to tweak:</p>
<p>Anyone can register a free accommodation listing.&nbsp; At a later stage they may choose to upgrade to a premium listing.&nbsp; They can then send me up to 10 images that I will upload.&nbsp; So here is the problem:&nbsp; I had a function in my system where I could mark a listing as premium.&nbsp; I could then manage the images by browsing to the image locally on my disk and then uploading it.&nbsp; I had to do this for each image received.&nbsp; The only problem was that I received images of various sizes that all had to be scaled to 200 x 150.&nbsp; So before uploading I had to use a graphics package to change the sizes.&nbsp; Quite a tedious affair really.&nbsp;</p>
<p>So I created a small Windows application where I simply specify the listing number to process.&nbsp; The images I received would be stored in their original format in the relevant listing folder.&nbsp; Once I say <em>GO</em> the system would talk to the website and set the listing to premium, the images would be resized, compressed and uploaded.&nbsp; As a last step the site would be instructed to send an e-mail to the owner of the listing notifying them of the changes.</p>
<p>So a whole host of functions were grouped together to accomplish a simple task.</p>
<p>Our software needs to be simple to use.</p>