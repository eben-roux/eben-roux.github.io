---
layout: post
title: "Entity vs. Value Object"
date: 2010-08-18 23:54:00
comments: true
categories: 
---

<p>This is another question that keeps popping up on the Domain-Driven Design group.&nbsp; It seems to be a difficult task and some of the answers seem to complicate matters since they come from a technical context.</p>
<h3>How do you use your object?</h3>
<p>The same concept may very well be implemented as a value object in one context and as an entity in the next and depending on the type of object this distinction would be more, or less, pronounced.&nbsp; So it is important to understand how you <em>intend</em> using the object.&nbsp; If you are you interested in a <em>very</em> particular instance it is an entity and that's that.&nbsp; An object like an <strong>Employee</strong> or an <strong>Invoice</strong> can immedsiately be identified as an entity since we are all familiar with these concepts and 'know' that we need to work with specific instances.&nbsp; So we'll take something a bit more fluid like an <strong>Address</strong>.&nbsp;</p>
<p>Now when would an <strong>Address</strong> need to be an entity?&nbsp; Well, do we care about a specific instance?&nbsp; Is our application (in our Bounded Context) interested in a particular address?</p>
<h3>Example 1: Courier - Delivery Bounded Context</h3>
<p>Let's imagine that we are couriers and when we receive a parcel we need to deliver it to a recipient at a particular address.&nbsp; Since we specialise in same-day business delivery we frequently deliver to office blocks that have the same street address but may house many of our clients.&nbsp; Here we care about a particlar <strong>Address </strong>and we link recipients to it.&nbsp; The <strong>Address</strong> is an <strong>Entity</strong>.</p>
<h3>Example 2: Courier - HR Bounded Context</h3>
<p>In our courier company we also have an HR system so we store <strong>Employee</strong> objects.&nbsp; Each employee has a home address stored as fields in the employee record in our database.&nbsp; However, in our object model we have an <strong>Address</strong> object represented by the <strong>Employee.<em>HomeAddress</em></strong> property (this is just for illustration so we won't split hairs as far as software design is concerned).&nbsp; In this case it seems quite obvious that <strong>Address</strong> has to be a value object since it is purely a container.</p>
<p>So let's say this same <strong>Employee</strong> object can have a list of ways to contact the employee and we model a <strong>ContactMethod</strong> class.&nbsp; In our data store we will have a one-to-many relationship between our <strong>Employee</strong> table and the <strong>ContactMethod</strong> table.&nbsp; In fact, we go so far as to give <strong>ContactMethod</strong> an <strong>Id</strong> so that we can directly update the data in the database (for whatever reason).&nbsp; <strong>ContactMethod</strong> would be aggregated with <strong>Employee</strong> so whenever we save the employee the contact methods are re-populated in the database (deleted and re-inserted).&nbsp; The ContactMethod is still a value object.&nbsp; Even though it may have its own life-cycle and identifier we do not care about a <em>specifc</em> instance in our application.&nbsp; We will never, and can never, say "<em>go and fetch me contact method... {what}</em>".&nbsp; So there is no way to uniquely identify a <strong>Value Object</strong> using the Ubiquitous Language for our domain even though it may have an identifier that is universally unique.&nbsp; It is simply a synthetic key used for technical efficiency.</p>
<h3>Immutable Value Objects<br /></h3>
<p>Some folks are of the opinion that value objects must be immutable.&nbsp; This is not necessarily so.&nbsp; As with our first address example an immutable value object would mean we need to create a new instance to make simple changes such as fixing a spelling mistake.&nbsp; It is perfectly acceptable to use immutable objects but there is also no reason why we can't change the properties of the same object instance.&nbsp; The only time that an immutable value object would be required is when the object instance is shared.&nbsp; But the only time you would share a value object in this way is when you are implementing the flywieght pattern and those cases are pretty rare.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>